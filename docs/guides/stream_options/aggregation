# Aggregations

Aggregations over a sliding event-time window ("streaming aggregations") with Structured Streaming are very similar to using `GROUP BY` in batch operation in SQL. In a grouped aggregation, aggregate values (such as counts, running totals, or averages) are maintained for each unique value in the user-specified grouping column. Structured Streaming has the added complication that records can delayed and thus come out-of-order. In case of window-based aggregations in Structured Streaming, aggregate values are maintained for each window into which the event-time of a row falls.

The central questions for streaming aggregations is how long to wait for late arriving records and when to emit aggregation values. 

## Streaming aggregation conceptual example

Suppose that you have a stream of sales and want to compute the median sale-price per hour, in real-time. To do this, Structured Streaming needs to keep _state_ for each window. For example, let's say we make the following sales at a store at the following times:

- `$15` at 2:45pm
- `$10` at 2:30pm
- `$30` at 3:30pm

Now, let's say it receives the following two more records at 4:15 PM:

- [2pm, 3pm): `[$15, $10]`
- [3pm, 4pm): `[$30]`

Then, let's say the aggregation operator receives two more records:

- `$20` at 2:15pm
- `$25` at 3:15pm

Structured Streaming would use the event time rather than the time received then update its state to look like the following:

- [2pm, 3pm): `[$15, $10, $20]`
- [3pm, 4pm): `[$30, $25]`

Clearly, these events are received out-of-order. Structured Streaming is able to deal with this by buffering records in state, based on the records' event-times. 



The central questions for streaming aggregations  is, though: if Structured Streaming is buffering records per window, when will it emit an aggregate record downstream? There are two main options:

1. It can emit an aggregate once it's reasonably confident that aggregate won't change.
2. It can emit an aggregate every time an aggregate gets updated.

